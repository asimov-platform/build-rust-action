name: "ASIMOV build rust action"
author: "ASIMOV by Haltia.AI <support@asimov.so>"
description: "Action to help automate building rust crates"
inputs:
  target:
    description: "Target to build for."
    required: true
  profile:
    description: "Profile to build with. Defaults to release."
    required: false
    default: "release"
  glibc-version:
    description: "Version of GLIBC to link to. Only works on Linux and using zigbuild. Defaults to system default."
    required: false
  artifact-prefix:
    description: "Prefix for the output artifact name. Defaults to empty string."
    required: false
  artifact-suffix:
    description: "Suffix for the output artifact name. Defaults to target."
    required: false
  artifact-name:
    description: "Name of the output artifact. Must be unique. Prepended with artifact-prefix and appended with artifact-suffix. Defaults to binary being built."
    required: false
  packages-to-build:
    description: "Name of the packages to build, separated by space. Defaults to workspace's default-members that have at least one binary target."
    required: false
  targets-to-build:
    description: "Name of the targets to build. Defaults to all binary targets in the packages-to-build."
    required: false
  binary-extension:
    description: "Extension for the output binary file. Defaults to empty string."
    required: false
  working-directory:
    description: "Working directory. Defaults to root."
    required: false
    default: "."
  checkout:
    description: "Checkout repository? Defaults to true."
    required: false
    default: "true"
  rust-toolchain:
    description: "Rust toolchain to use. Defaults to stable."
    required: false
    default: "stable"
  install-macos-sdk:
    description: "Install MacOS SDK? Only works with zigbuild. Defaults to false."
    required: false
    default: "false"
  use-zigbuild:
    description: "Use cargo-zigbuild? Defaults to false."
    required: false
    default: "false"
  extra-build-arguments:
    description: "Extra arguments to pass to cargo build. Defaults to empty string."
    required: false
    default: ""
  strip-artifact:
    description: "Strip symbols? Defaults to false."
    required: false
    default: "false"
  compress-artifact:
    description: "Compress artifact? Defaults to true."
    required: false
    default: "true"
  codesign-cert:
    description: "Base64-encoded PKCS12 certificate for codesign tool. Only works on macOS. Defaults to empty string."
    required: false
    default: ""
  codesign-cert-password:
    description: "Base64-encoded password for the certificate. Defaults to empty string."
    required: false
    default: ""
  app-store-connect-api-key:
    description: "Base64-encoded JSON-serialized App Store Connect API key. Only works on macOS. Defaults to empty string."
    required: false
    default: ""
  upload-artifact:
    description: "Upload artifact? Defaults to true."
    required: false
    default: "true"
outputs:
  target-dir:
    description: "Path to the build directory (target directory)."
    value: ${{ steps.globals.outputs.build_dir }}
  output-dir:
    description: "Path to the output directory (relative to the working directory)."
    value: ${{ steps.globals.outputs.output_dir }}
  output-paths:
    description: "Paths to the output files separated by space (relative to the working directory)."
    value: ${{ steps.process.outputs.output }}
  artifact-id:
    description: "GitHub ID of an Artifact, can be used by the REST API."
    value: ${{ steps.upload.outputs.artifact-id }}
  artifact-url:
    description: "URL to download an Artifact."
    value: ${{ steps.upload.outputs.artifact-url }}
runs:
  using: "composite"
  steps:
    - name: Install Rust and target
      id: toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        target: ${{ inputs.target }}
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4
      with:
        path: ${{ inputs.working-directory }}
    - name: Prepare environment
      id: globals
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        METADATA=$(cargo metadata --format-version 1 --no-deps)

        if [[ -z "${{ inputs.packages-to-build }}" ]]; then
          PACKAGES_TO_BUILD=$(echo "$METADATA" | jq -r '. as $root | [.packages[] | select(.id | IN($root.workspace_default_members[])) | select(any(.targets[]; .kind[] | contains("bin"))) | .name] | join(" ")')
          if [[ -z "$PACKAGES_TO_BUILD" ]]; then
            echo "::error::No valid packages found. Please specify packages-to-build input."
            exit 1
          fi
        else
          PACKAGES_TO_BUILD="${{ inputs.packages-to-build }}"
        fi

        TARGET_WITH_GLIBC="${{ inputs.target }}${{ inputs.glibc-version != '' && '.' || '' }}${{ inputs.glibc-version }}"
        IS_TARGET_WINDOWS="${{ contains(inputs.target, 'windows') }}"
        SHOULD_CODESIGN="${{ inputs.codesign-cert != '' && contains(inputs.target, 'apple-darwin') }}"
        SHOULD_NOTARIZE="${{ inputs.app-store-connect-api-key != '' && contains(inputs.target, 'apple-darwin') }}"
        OUTPUT_DIR="output"
        TARGET_DIR=$(echo "$METADATA" | jq -r '.target_directory')
        BUILD_DIR="${TARGET_DIR}/${{ inputs.target }}/${{ inputs.profile }}"
        TARGETS_TO_BUILD=$(echo "$METADATA" | jq --arg packages_to_build "$PACKAGES_TO_BUILD" -r '[.packages[] | select(.name as $n | ($packages_to_build | split(" ") | index($n))) | .targets[] | select(.kind[] | contains("bin")) | .name] | join(" ")')
        PACKAGES_MAP=$(echo "$METADATA" | jq --arg packages_to_build "$PACKAGES_TO_BUILD" -r '[.packages[] | select(.name as $n | ($packages_to_build | split(" ") | index($n))) | select([.targets[] | select(.kind[] | contains("bin"))] | length > 0) | "\(.name)=\([.targets[] | select(.kind[] | contains("bin")) | .name] | join(","))"] | join(" ")')

        echo "target_with_glibc=$TARGET_WITH_GLIBC" >> $GITHUB_OUTPUT
        echo "is_target_windows=$IS_TARGET_WINDOWS" >> $GITHUB_OUTPUT
        echo "should_codesign=$SHOULD_CODESIGN" >> $GITHUB_OUTPUT
        echo "should_notarize=$SHOULD_NOTARIZE" >> $GITHUB_OUTPUT
        echo "output_dir=$OUTPUT_DIR" >> $GITHUB_OUTPUT
        echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT
        echo "build_dir=$BUILD_DIR" >> $GITHUB_OUTPUT
        echo "packages_to_build=$PACKAGES_TO_BUILD" >> $GITHUB_OUTPUT
        echo "targets_to_build=$TARGETS_TO_BUILD" >> $GITHUB_OUTPUT
        echo "packages_map=$PACKAGES_MAP" >> $GITHUB_OUTPUT
    - name: Install rcodesign
      if: ${{ steps.globals.outputs.should_codesign == 'true' }}
      shell: bash
      run: |
        cargo install apple-codesign
    - name: Install MinGW
      if: ${{ runner.os != 'windows' && inputs.target == 'x86_64-pc-windows-gnu' }}
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -yq --no-install-recommends mingw-w64
    - name: Install macOS SDK
      id: macos-sdk
      if: ${{ inputs.install-macos-sdk == 'true' }}
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        curl -L https://github.com/roblabla/MacOSX-SDKs/releases/download/13.3/MacOSX13.3.sdk.tar.xz | tar xJ
        echo "root=$(pwd)/MacOSX13.3.sdk/" >> $GITHUB_OUTPUT
    - name: Install zig
      if: ${{ inputs.use-zigbuild == 'true' }}
      uses: mlugg/setup-zig@v2
    - name: Install cargo-zigbuild
      if: ${{ inputs.use-zigbuild == 'true' }}
      shell: bash
      run: cargo install --locked cargo-zigbuild
    - name: Set Perl environment variables
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        echo "PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        echo "OPENSSL_SRC_PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
    - name: Build
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        BUILD_ARG="${{ inputs.use-zigbuild == 'true' && 'zigbuild' || 'build' }}"
        PACKAGES_TO_BUILD=(${{ steps.globals.outputs.packages_to_build }})
        PACKAGE_ARG="${PACKAGES_TO_BUILD[@]/#/--package }"
        TARGETS_TO_BUILD=(${{ steps.globals.outputs.targets_to_build }})
        TARGET_ARG="${TARGETS_TO_BUILD[@]/#/--bin }"
        export SDKROOT="${{ inputs.use-zigbuild == 'true' && steps.macos-sdk.outputs.root || '' }}"
        cargo +${{ steps.toolchain.outputs.name }} $BUILD_ARG --profile ${{ inputs.profile }} $PACKAGE_ARG $TARGET_ARG --target ${{ steps.globals.outputs.target_with_glibc }} ${{ inputs.extra-build-arguments }}
    - name: Process binaries
      id: process
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        mkdir ${{ steps.globals.outputs.output_dir }}

        PACKAGES_MAP=(${{ steps.globals.outputs.packages_map }})

        if [ "${{ steps.globals.outputs.should_codesign }}" = "true" ]; then
          CERT_PATH="${{ runner.temp }}/cert.p12"
          echo "Saving certificate to $CERT_PATH"
          echo "${{ inputs.codesign-cert }}" | base64 -d > "$CERT_PATH"

          CERT_PASSWORD_PATH="${{ runner.temp }}/cert_password.txt"
          echo "Saving certificate password to $CERT_PASSWORD_PATH"
          echo "${{ inputs.codesign-cert-password }}" | base64 -d > "$CERT_PASSWORD_PATH"
        fi

        if [ "${{ steps.globals.outputs.should_notarize }}" = "true" ]; then
          API_KEY_PATH="${{ runner.temp }}/api_key.json"
          echo "Saving API key to $API_KEY_PATH"
          echo "${{ inputs.app-store-connect-api-key }}" | base64 -d > "$API_KEY_PATH"
        fi

        EXT="${{ inputs.binary-extension }}"
        PREFIX="${{ inputs.artifact-prefix }}"
        SUFFIX="${{ inputs.artifact-suffix != '' && inputs.artifact-suffix || inputs.target }}"
        EXT="${EXT:+.}${EXT}"
        PREFIX="$PREFIX${PREFIX:+-}"
        SUFFIX="${SUFFIX:+-}$SUFFIX"
        OUTPUT=()

        for PACKAGE_ENTRY in "${PACKAGES_MAP[@]}"; do
          PACKAGE_NAME="${PACKAGE_ENTRY%%=*}" # remove everything after the first '='
          PACKAGE_TARGETS="${PACKAGE_ENTRY#*=}" # remove everything before the first '='
          TARGETS="${PACKAGE_TARGETS//,/ }" # convert from comma-separated to space-separated
          FILES=()

          for TARGET in $TARGETS; do
            NAME="${{ inputs.artifact-name != '' && inputs.artifact-name || '$TARGET' }}"

            if [ "${{ inputs.compress-artifact }}" = "true" ]; then
              RESULT="$NAME$EXT"
            else
              RESULT="$PREFIX$NAME$SUFFIX$EXT"
            fi

            BUILD_PATH="${{ steps.globals.outputs.build_dir }}/$TARGET$EXT"
            OUTPUT_PATH="./${{ steps.globals.outputs.output_dir }}/$RESULT"

            # Copy file to output directory
            cp "$BUILD_PATH" "$OUTPUT_PATH"

            # Strip file if needed
            if [ "${{ inputs.strip-artifact }}" = "true" ]; then
              strip "$OUTPUT_PATH"
            fi

            # Codesign file if needed
            if [ "${{ steps.globals.outputs.should_codesign }}" = "true" ]; then
              rcodesign sign --p12-file "$CERT_PATH" --p12-password-file "$CERT_PASSWORD_PATH" --for-notarization "$OUTPUT_PATH"
            fi

            FILES+=("$OUTPUT_PATH")
          done

          if [ "${{ steps.globals.outputs.should_notarize }}" = "true" ]; then
            TEMP_ZIP_PATH="${{ runner.temp }}/$PACKAGE_NAME.zip"

            if [ "$RUNNER_OS" = "Windows" ]; then
              7z a -tzip "$TEMP_ZIP_PATH" ${FILES[@]}
            elif [ "${{ steps.globals.outputs.is_target_windows }}" = "true" ]; then
              zip -j "$TEMP_ZIP_PATH" ${FILES[@]}
            fi

            rcodesign notary-submit --api-key-file .\key.json --wait "$TEMP_ZIP_PATH"
            rm "$TEMP_ZIP_PATH"
          fi

          if [ "${{ inputs.compress-artifact }}" = "true" ]; then
            OUTPUT_PATH="${{ steps.globals.outputs.output_dir }}/$PREFIX$PACKAGE_NAME$SUFFIX"

            if [ "$RUNNER_OS" = "Windows" ]; then
              OUTPUT_PATH="$OUTPUT_PATH.zip"
              7z a -tzip -sdel "$OUTPUT_PATH" ${FILES[@]}
            elif [ "${{ steps.globals.outputs.is_target_windows }}" = "true" ]; then
              OUTPUT_PATH="$OUTPUT_PATH.zip"
              zip -mj "$OUTPUT_PATH" ${FILES[@]}
            else
              OUTPUT_PATH="$OUTPUT_PATH.tar.gz"
              tar_bin=${{ runner.os == 'macOS' && 'gtar' || 'tar' }}
              $tar_bin -czf "$OUTPUT_PATH" --transform 's|.*/||' --remove-files ${FILES[@]}
            fi

            # Append final archive path to the output array
            OUTPUT+=("$OUTPUT_PATH")
          else
            # Append all files to the output array
            OUTPUT+=("${FILES[@]}")
          fi
        done

        echo "output=${OUTPUT[@]}" >> $GITHUB_OUTPUT
    - name: Upload artifact
      id: upload
      if: ${{ inputs.upload-artifact == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-prefix }}${{ inputs.target }}${{ inputs.artifact-suffix }}
        path: ${{ inputs.working-directory }}/${{ steps.globals.outputs.output_dir }}/*
        if-no-files-found: error
