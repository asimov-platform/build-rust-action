name: "ASIMOV build rust action"
author: "ASIMOV by Haltia.AI <support@asimov.so>"
description: "Action to help automate building rust crates"
inputs:
  target:
    description: "Target to build for."
    required: true
  glibc-version:
    description: "Version of GLIBC to link to. Only works on Linux and using zigbuild. Defaults to system default."
    required: false
    default: ""
  artifact-name:
    description: "Name of the output artifact. Must be unique. Prefixed with artifact-prefix."
    required: true
  artifact-prefix:
    description: "Prefix for the output artifact name. Defaults to package name."
    required: false
  package-name:
    description: "Name of the package. Default is parsed from Cargo.toml."
    required: false
  binary-name:
    description: "Name of the output binary file. Defaults to package name with extension."
    required: false
  binary-extension:
    description: "Extension for the output binary file. Defaults to empty string."
    required: false
  working-directory:
    description: "Working directory. Defaults to root."
    required: false
    default: "."
  checkout:
    description: "Checkout repository? Defaults to true."
    required: false
    default: "true"
  rust-toolchain:
    description: "Rust toolchain to use. Defaults to stable."
    required: false
    default: "stable"
  install-macos-sdk:
    description: "Install MacOS SDK? Defaults to false."
    required: false
    default: "false"
  use-zigbuild:
    description: "Use cargo-zigbuild? Defaults to false."
    required: false
    default: "false"
  extra-build-arguments:
    description: "Extra arguments to pass to cargo build. Defaults to empty string."
    required: false
    default: ""
  strip-artifact:
    description: "Strip symbols? Defaults to false."
    required: false
    default: "false"
  compress-artifact:
    description: "Compress artifact? Defaults to true."
    required: false
    default: "true"
  upload-artifact:
    description: "Upload artifact? Defaults to true."
    required: false
    default: "true"
outputs:
  artifact-path:
    description: "Path to an Artifact."
    value: ${{ steps.finalize.outputs.artifact-path }}
  artifact-id:
    description: "GitHub ID of an Artifact, can be used by the REST API."
    value: ${{ steps.upload.outputs.artifact-id }}
  artifact-url:
    description: "URL to download an Artifact."
    value: ${{ steps.upload.outputs.artifact-url }}
runs:
  using: "composite"
  steps:
    - name: Install Rust and target
      id: toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        target: ${{ inputs.target }}
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4
      with:
        path: ${{ inputs.working-directory }}
    - name: Obtain package name
      id: jq
      if: ${{ inputs.package-name == '' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        METADATA=$(cargo metadata --format-version 1 --no-deps)
        VALID_TARGETS=$(echo "$METADATA" | jq -r '. as $root | .packages[] | select(.id | IN($root.workspace_default_members[])) | select(.targets[].kind[] | contains("bin")) | .name')
        VALID_TARGETS_COUNT=$(echo "$VALID_TARGETS" | wc -l)
        if [ "$VALID_TARGETS_COUNT" -eq 0 ]; then
          echo "::error::No valid targets found. Please specify package-name input."
          exit 1
        elif [ "$VALID_TARGETS_COUNT" -gt 1 ]; then
          echo "::error::Multiple valid targets found. Please specify package-name input."
          exit 1
        fi
        PACKAGE_NAME=$(echo "$VALID_TARGETS" | head -n 1)
        echo "result=$PACKAGE_NAME" >> $GITHUB_OUTPUT
    - name: Prepare environment
      id: globals
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        EXT="${{ inputs.binary-extension != '' && '.' || '' }}${{ inputs.binary-extension }}"
        TARGET_WITH_GLIBC="${{ inputs.target }}${{ inputs.glibc-version != '' && '.' || '' }}${{ inputs.glibc-version }}"
        PACKAGE_NAME="${{ inputs.package-name != '' && inputs.package-name || steps.jq.outputs.result }}"
        BINARY_NAME="${{ inputs.binary-name != '' && inputs.binary-name || '$PACKAGE_NAME' }}$EXT"
        ARTIFACT_PREFIX="${{ inputs.artifact-prefix != '' && inputs.artifact-prefix || '$PACKAGE_NAME' }}"
        ARTIFACT_NAME="${ARTIFACT_PREFIX}-${{ inputs.artifact-name }}"
        ARTIFACT_NAME_EXT="$ARTIFACT_NAME$EXT"
        IS_TARGET_WINDOWS="${{ contains(inputs.target, 'windows') }}"
        OUTPUT_DIR="output"
        OUTPUT_BIINARY_PATH="${OUTPUT_DIR}/$BINARY_NAME"
        OUTPUT_ARTIFACT_PATH="${OUTPUT_DIR}/$ARTIFACT_NAME"
        OUTPUT_ARTIFACT_PATH_EXT="${OUTPUT_DIR}/$ARTIFACT_NAME_EXT"
        TARGET_DIR=$(cargo metadata --format-version 1 --no-deps | jq -r '.target_directory')
        echo "target_with_glibc=$TARGET_WITH_GLIBC" >> $GITHUB_OUTPUT
        echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
        echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        echo "artifact_name_ext=$ARTIFACT_NAME_EXT" >> $GITHUB_OUTPUT
        echo "is_target_windows=$IS_TARGET_WINDOWS" >> $GITHUB_OUTPUT
        echo "output_dir=$OUTPUT_DIR" >> $GITHUB_OUTPUT
        echo "output_binary_path=$OUTPUT_BIINARY_PATH" >> $GITHUB_OUTPUT
        echo "output_artifact_path=$OUTPUT_ARTIFACT_PATH" >> $GITHUB_OUTPUT
        echo "output_artifact_path_ext=$OUTPUT_ARTIFACT_PATH_EXT" >> $GITHUB_OUTPUT
        echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT
    - name: Install MinGW
      if: ${{ runner.os != 'windows' && inputs.target == 'x86_64-pc-windows-gnu' }}
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -yq --no-install-recommends mingw-w64
    - name: Install macOS SDK
      id: macos-sdk
      if: ${{ inputs.install-macos-sdk == 'true' }}
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        curl -L https://github.com/roblabla/MacOSX-SDKs/releases/download/13.3/MacOSX13.3.sdk.tar.xz | tar xJ
        echo "root=$(pwd)/MacOSX13.3.sdk/" >> $GITHUB_OUTPUT
    - name: Install zig
      if: ${{ inputs.use-zigbuild == 'true' }}
      uses: mlugg/setup-zig@v1
    - name: Install cargo-zigbuild
      if: ${{ inputs.use-zigbuild == 'true' }}
      shell: bash
      run: cargo install --locked cargo-zigbuild
    - name: Set Perl environment variables
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        echo "PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        echo "OPENSSL_SRC_PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
    - name: Build (Unix)
      if: ${{ runner.os != 'Windows' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        BUILD_ARG="${{ inputs.use-zigbuild == 'true' && 'zigbuild' || 'build' }}"
        export SDKROOT="${{ inputs.use-zigbuild == 'true' && steps.macos-sdk.outputs.root || '' }}"
        cargo +${{ steps.toolchain.outputs.name }} $BUILD_ARG --release --package ${{ steps.globals.outputs.package_name }} --target ${{ steps.globals.outputs.target_with_glibc }} ${{ inputs.extra-build-arguments }}
    - name: Build (Windows)
      if: ${{ runner.os == 'Windows' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        cargo +${{ steps.toolchain.outputs.name }} build --release --package ${{ steps.globals.outputs.package_name }} --target ${{ steps.globals.outputs.target_with_glibc }} ${{ inputs.extra-build-arguments }}
    - name: Move artifact (Unix)
      if: ${{ runner.os != 'Windows' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        mkdir ${{ steps.globals.outputs.output_dir }}
        mv ${{ steps.globals.outputs.target_dir }}/${{ inputs.target }}/release/${{ steps.globals.outputs.binary_name }} \
          ${{ steps.globals.outputs.output_artifact_path_ext }}
    - name: Move artifact (Windows)
      if: ${{ runner.os == 'Windows' }}
      working-directory: ${{ inputs.working-directory }}
      shell: pwsh
      run: |
        mkdir ${{ steps.globals.outputs.output_dir }}
        Move-Item -Path ${{ steps.globals.outputs.target_dir }}/${{ inputs.target }}/release/${{ steps.globals.outputs.binary_name }} -Destination ${{ steps.globals.outputs.output_artifact_path_ext }}
    - name: Strip artifact
      if: ${{ inputs.strip-artifact == 'true' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: strip ${{ steps.globals.outputs.output_artifact_path_ext }}
    - name: Compress or archive artifact
      id: compress
      if: ${{ inputs.compress-artifact == 'true' }}
      shell: bash
      run: |
        ARTIFACT_PATH="${{ inputs.working-directory }}/${{ steps.globals.outputs.output_artifact_path_ext }}"
        INPUT_PATH="${{ inputs.working-directory }}/${{ steps.globals.outputs.output_binary_path }}"
        OUTPUT_PATH="${{ inputs.working-directory }}/${{ steps.globals.outputs.output_artifact_path }}"

        mv "$ARTIFACT_PATH" "$INPUT_PATH"

        if [ "$RUNNER_OS" = "Windows" ]; then
          OUTPUT_PATH="$OUTPUT_PATH.zip"
          7z a -tzip -sdel "$OUTPUT_PATH" "$INPUT_PATH"
        elif [ "${{ steps.globals.outputs.is_target_windows }}" = "true" ]; then
          OUTPUT_PATH="$OUTPUT_PATH.zip"
          zip -mj "$OUTPUT_PATH" "$INPUT_PATH"
        else
          OUTPUT_PATH="$OUTPUT_PATH.gz"
          gzip -f "$INPUT_PATH"
          mv "$INPUT_PATH.gz" "$OUTPUT_PATH"
        fi

        echo "output-path=$OUTPUT_PATH" >> $GITHUB_OUTPUT
    - name: Upload artifact
      id: upload
      if: ${{ inputs.upload-artifact == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.working-directory }}/${{ steps.globals.outputs.output_dir }}/*
        if-no-files-found: error
    - name: Write outputs
      id: finalize
      shell: bash
      run: |
        if [ "${{ inputs.compress-artifact }}" == "true" ]; then
          echo "artifact-path=${{ steps.compress.outputs.output-path }}" >> $GITHUB_OUTPUT
        else
          echo "artifact-path=${{ inputs.working-directory }}/${{ steps.globals.outputs.output_artifact_path_ext }}" >> $GITHUB_OUTPUT
        fi
